name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. application.yml 파일 생성
      - name: Create application.yml
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > src/main/resources/application.yml

      # 4. Gradle 권한 설정
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 5. 백엔드 빌드 (테스트 제외)
      - name: Build Backend with Gradle
        run: ./gradlew clean build -x test

      # 6. Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 7. Docker 이미지 빌드 및 푸시
      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/linkle-app:latest -f Dockerfile .
          docker push ${{ secrets.DOCKER_USERNAME }}/linkle-app:latest

      # 8. EC2로 파일 전송
      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yml,nginx"
          target: "/home/ubuntu/linkle"

      # 9. EC2에서 배포 실행
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/linkle
            
            # Docker Hub에서 최신 이미지 pull
            docker pull ${{ secrets.DOCKER_USERNAME }}/linkle-app:latest
            
            # 기존 컨테이너 중지 및 제거
            docker compose down
            
            # 새로운 컨테이너 시작
            docker compose up -d
            
            # 사용하지 않는 이미지 정리
            docker image prune -f